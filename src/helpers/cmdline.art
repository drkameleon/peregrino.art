;===============================================
; Peregrino.art
;
; Lightning-fast command-line 
; benchmarking tool & library
; for Arturo
;
; MIT License
; (c) 2024 Yanis Zafirópulos
;-----------------------------------------------
; @file src/helpers/cmdline.art
;===============================================

define :cmdline [
    init: method [information :dictionary, options :block][
        \information: information
        \options: []
        \optionsHelp: []
        \tab: "    "

        opts: options ++ @[
            ø
            @["h" "help"      [:logical] "" "Show this help screen" false]
            @["v" "version"   [:logical] "" "Print version" false]
        ]
        loop opts 'opt [
            (opt)?[
                \options: \options ++ @[opt]

                hint: (opt\2 = [:logical])? 
                    -> "" 
                    -> "<" ++ (
                            (empty? opt\3)? -> replace join.with:", " to [:string] opt\2 {/[\[\]]/} ""
                                            -> opt\3
                    ) ++ ">"

                \optionsHelp: \optionsHelp ++ #[
                    short: opt\0
                    long: opt\1
                    types: opt\2
                    hint: hint
                    description: opt\4
                    default: (or? (or? null? opt\5 ""=opt\5) opt\2 = [:logical])? -> "" -> ~"(Default: |opt\5|)"
                ]
            ][
                \optionsHelp: \optionsHelp ++ ø
            ]
        ]
    ]

    showUsage: method [][
        tabbed?: not? null? attr 'isError
        print (tabbed? ? -> "  " -> "") ++ color.bold #cyan "Usage:"
        print (tabbed? ? -> "  " -> "") ++ \tab ++ \information\app ++ " [options] " ++ 
            (join.with: " " map keys \information\arguments 'k -> "<" ++ k ++ ">") ++ ",..."
    ]

    showHelp: method [][
        print color.bold #green capitalize \information\app
        print \information\description
        print ""
        \showUsage
        print ""
        print color.bold #cyan "Arguments:"
        loop \information\arguments [command,descr][
            print \tab ++ color #magenta "<" ++ command ++ ">"
            print \tab ++ \tab ++ descr
        ]
        print ""
        print color.bold #cyan "Options:"
        loop \optionsHelp 'entry [
            if entry [
                entry\helper: ((empty? entry\short) ? -> color #magenta "    " -> (color #magenta "-" ++ entry\short) ++ ", ") ++ 
                            (color #magenta "--" ++ entry\long) ++
                            " " ++ entry\hint
            ]
        ]
        maxim: (size \tab) + max map \optionsHelp 'entry [
            (entry)? -> size entry\helper
                     -> 0
        ]
        maxim: maxim + maxim % size \tab
        loop \optionsHelp 'entry [
            print (entry)? -> \tab ++ (pad.right entry\helper maxim) ++ entry\description ++ " " ++ entry\default
                           -> ""
        ]
        print ""
        exit
    ]

    showVersion: method [][
        print [\information\app \information\version]
        exit
    ]

    fetchParameter: method [name][
        loop \options 'opt [
            if contains? @[opt\0 opt\1] name ->
                return opt
        ]
        if name = "values" -> return ["" "" [:block]]
        return null
    ]

    correctType?: method [expected, val][
        contains? expected\2 type val
    ]

    showError: method [msg][
        print ""
        print [color #red "!" msg "\n"]
        do [.isError]
        \showUsage
        print ""
        print "  Use `--help` to see more options"
        print ""
        exit
    ]

    unrecognizedParameter: method [which][
        \showError "Unrecognized parameter: " ++ (color.bold #white name)
    ]

    wrongParameter: method [which, expected, val][
        \showError "Wrong parameter: " ++ (color.bold #white to :string val) ++ " for: " ++ (color.bold #white which) ++ "\n  " ++ "Expected: " ++ join.with:", " to [:string] expected\2
    ]

    validate: method [arguments][
        loop arguments [name, value][
            unless param: <= \fetchParameter name -> 
                \unrecognizedParameter name 
            unless \correctType? param value ->
                \wrongParameter name param value
        ]
    ]

    processing: method [arguments :dictionary][
        \validate arguments 

        exportable: #[]
        loop \options 'entry [
            subname: capitalize entry\1

            finalName: "opt" ++ subname

            (key? arguments entry\0)? [
                exportable\[finalName]: arguments\[entry\0]
            ][
                (key? arguments entry\1)? [
                    exportable\[finalName]: arguments\[entry\1]
                ][
                    exportable\[finalName]: entry\5
                ]
            ]
        ]
        exportable\optValues: arguments\values
        if and? [key? exportable 'optHelp][exportable\optHelp] -> \showHelp
        if and? [key? exportable 'optVersion][exportable\optVersion] -> \showVersion

        return exportable
    ]
]