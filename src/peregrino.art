;===============================================
; Peregrino.art
;
; Lightning-fast command-line 
; benchmarking tool & library
; for Arturo
;
; MIT License
; (c) 2024 Yanis Zafirópulos
;-----------------------------------------------
; @file src/peregrino.art
;===============================================

import {progressive}

import ./{helpers/misc}
import ./{helpers/stats}
import ./{helpers/strings}
import ./{helpers/styles}!

define :peregrino [
    init: method [commands][
        \commands: commands
        \stats: #[]
        \columns: @[
            #[header:"Command"      short:"Command"     format:{|filename| (*)}]
            #[header:"Average"      short:"Avg"         format:{|row\data\avg|}]
            #[header:"Comparison"   short:"Cmp"         format:{+ |row\data\rel|%}]
            #[header:"Deviation"    short:"Dev"         format:{± |row\data\dev|}]
            #[header:"Range"        short:"Range"       format:{|row\data\min| .. |row\data\max|}]
        ]

        \final: []
        
        \minimal?: not? null? attr 'minimal
        \ascii?: not? null? attr 'ascii
        \colorless?: not? null? attr 'colorless

        \T: (\ascii?) ? -> _tbl\ascii -> _tbl\normal
        \E: (\ascii?) ? -> _elements\ascii -> _elements\normal
    ]

    colored: method [col,str][
        (\colorless?) ? -> str -> color col str
    ]

    printInfo: function [][
        print ""
        print [\colored.bold #magenta "   Peregrino" ~"v/|script\version|"]
        print ""
        print [\colored.bold #gray pad.right "   System :" 10 \colored #gray ~"|sys\cpu\arch|/|sys\os|"]
        print [\colored.bold #gray pad.right "   CPU    :" 10 \colored #gray to :string sys\cpu\cores \colored #gray "cores"]
    ]

    printHeader: method [title][
        print ""
        print \colored #orange repeat \E\horLine terminal\width
        print \colored.bold #orange " " ++ \E\dot ++ " " ++ upper title
        print ""
    ]

    getColumns: method [][
        minNeeded: 0
        minFirstColumn: 25
        columns: new \columns
        loop drop columns 'col [
            col\min: max @[size col\header, max map \final 'row ->
                size ~ col\format
            ]
            minNeeded: minNeeded + col\min + 2
        ]
        minNeeded: minNeeded + 
                    2 +  ; spaces front/back
                    6    ; line separators

        spaceLeft: terminal\width - minNeeded
        columns\0\min: spaceLeft - 2

        if columns\0\min < minFirstColumn [
            lastCol: pop 'columns
            columns\0\min: spaceLeft + (lastCol\min + 1)
        ]

        adjust: 2
        do.times: 2 [
            c: 1
            while [and? c < size columns columns\0\min >= minFirstColumn + adjust][
                columns\[c]\min: columns\[c]\min + adjust
                columns\0\min: columns\0\min - adjust
                c: c + 1
            ]
        ]

        return columns
    ]

    finalizeData: method [][
        stats: map \stats [k, v] -> extend getStats v #[cmd: k]
        bestAvg: min map stats 'v -> v\data\avg
        loop stats 'v [
            v\data\rel: 100 * (v\data\avg - bestAvg) / bestAvg
        ]

        stats: arrange stats 'stat -> stat\data\avg

        \final: map stats 'v [
            #[
                cmd: v\cmd
                data: #.raw flatten map v\data [kk,vv]->
                    @[kk, nicefloat vv]
                outliers?: v\outliers?
            ]
        ]
    ]

    exportToJson: method [target][
        cleaned: []
        loop \final 'entry [
            newEntry: new entry
            newEntry\data: #.raw flatten map newEntry\data [k,v][
                @[k, to :floating v] 
            ]
            cleaned: cleaned ++ newEntry
        ]
        targetFile: target
        if empty? extract.extension targetFile ->
            targetFile: targetFile ++ ".json"

        write.pretty.json targetFile cleaned
    ]

    exportToMarkdown: method [target][
        oldT: \T
        oldColorless?: \colorless?
        \T: _tbl\markdown
        \colorless?: true

        do [.md]
        tblMd: \getTable

        \T: oldT
        \colorless?: oldColorless?

        targetFile: target
        if empty? extract.extension targetFile ->
            targetFile: targetFile ++ ".md"

        write targetFile tblMd
    ]

    getTable: method [][
        mdMode?: not? null? attr 'md

        cols: \getColumns
 
        tbl: ""
        unless mdMode? [
            ; top line
            tbl: tbl ++ 
                "  " ++ (spacer cols\0\min + 2) ++
                \T\topLeft ++ 
                (join.with:\T\tTop map drop cols 'c ->
                    repeat \T\horLine c\min + 2) ++
                \T\topRight
            tbl: tbl ++ "\n"
        ]
        
        ; header
        tbl: tbl ++ "   " ++ (join.with:\T\verLine map.with:'i cols 'c [
                (i=0)? -> pad.right c\header c\min + 1
                       -> pad.center c\header c\min + 2
            ]) ++ \T\verLine
        tbl: tbl ++ "\n"

        ; sub-header line
        tbl: tbl ++ " " ++ \T\topLeft ++ (join.with:\T\cross map cols 'c ->
            repeat \T\horLine c\min + 2) ++
            \T\tRight
        tbl: tbl ++ "\n"

        ; content
        loop.with:'rowId \final 'row [
            tbl: tbl ++ " " ++ \T\verLine ++ " " ++ (
                join.with:\T\verLine map.with:'i cols 'c [
                    str: switch i=0 [
                        filename: truncateLeft row\cmd c\min - 8
                        (pad.right replace ~ c\format "(*)" "" c\min + 1 - (row\outliers? ? -> 4 -> 0)) ++
                            (row\outliers? ? -> \colored #gray "(*) " -> "")
                    ][
                        choose c\header [
                            "Deviation" [
                                \colored #gray pad.center ~ c\format c\min + 2
                            ]
                            "Comparison" [
                                ("+ 0.00%" = ~ c\format) ?
                                    -> pad.center "--" c\min + 2
                                    -> pad.center ~ c\format c\min + 2
                            ]
                            else [
                                pad.center ~ c\format c\min + 2
                            ]
                        ]
                    ]
                    (rowId = 0)? -> \colored #green str
                                 -> str
                ]
            ) ++ \T\verLine
            tbl: tbl ++ "\n"
        ]

        unless mdMode? [
            ; bottom line
            tbl: tbl ++ " " ++ \T\bottomLeft ++ (join.with:\T\tBottom map cols 'c ->
                repeat \T\horLine c\min + 2) ++
                \T\bottomRight
        ]

        return tbl
    ]

    showAnalysis: method [][
        unless \minimal? ->
            \printHeader "analysis"

        \finalizeData

        (\minimal?)?[
            loop \final 'entry [
                print " - " ++ ((entry = first \final)? -> \colored #green entry\cmd -> entry\cmd) ++ (entry\outliers? ? -> \colored #gray " (*)" -> "")
                print "       " ++ "avg: " ++ entry\data\avg ++ (\colored #gray " +/- " ++ entry\data\dev)
                print "       " ++ "rng: " ++ entry\data\min ++ " .. " ++ entry\data\max
                print " "
            ]
        ][
            print \getTable
        ]

        if some? \final 'f -> f\outliers? [
            print \colored #gray (\minimal? ? -> " (*)" -> "  (*) ") ++ fillEvenly "Detected statistically-significant outliers! You could try running this test again after lowering your system load, in order to to minimize any interference to the results." 6
        ]

        unless \minimal? ->
            print ""
    ]

    idealMsg: function [msgId, msg][
        if terminal\width < 80 -> return ~"#|msgId|"
        if terminal\width < 120 -> return truncateLeft msg terminal\width / 3
        return truncateLeft msg terminal\width / 2
    ]

    calibrate: function [cmd][
        calvalues: []
        timeForOne: 0.001
        if \ascii? -> do [.plain]
        if \colorless? -> do [.colorless]
        if \minimal? -> do [.simple .hide]
        progressive\loop .ratioless .label: pad.right "Calibrating:" 20 10 'x [
            (x < 10)?[ 
                pause 50
                'calvalues ++ scalar benchmark.get [
                    output: execute ""
                ]
            ][
                'calvalues ++ to :floating scalar benchmark.get [
                    output: execute cmd
                ]  
            ]
        ]
        prints repeat "\b \b" terminal\width
        return @[to :floating (sum first.n:9 calvalues)/9, last calvalues]
    ]

    benchmark: method [times][
        unless \minimal? [
            \printInfo
            \printHeader "benchmarks"
        ]

        minimumRunningTime: 3000

        loop.with:'commandId \commands 'command [
            
            \stats\[command]: []
            [calibrator, timeForOne]: \calibrate command

            if zero? calculatedTimes: <= minimumRunningTime / to :integer timeForOne ->
                calculatedTimes: 3

            runs: times ?? calculatedTimes
            
            if \ascii? -> do [.plain]
            if \colorless? -> do [.colorless]
            (\minimal?)? -> do [.simple .hide] -> do [.keep]
            bar: progressive\new .label:pad.right "Benchmarking:" 20 runs!
            bar\processing: \idealMsg commandId command
            bar\increase 0
            loop runs 'x [
                \stats\[command]: \stats\[command] ++ (benchmark.get [
                    output: execute command
                ])
                if x = runs [
                    estimate: nicefloat (average map \stats\[command] => scalar) - calibrator
                    bar\message: \idealMsg commandId command
                    bar\label: (pad.right ~"~ |estimate|/run" 17) ++ pad.right \E\timer 3
                ]
                bar\increase 1
            ]
            \stats\[command]: map \stats\[command] 'v -> to :floating (scalar v) - calibrator
            prints repeat "\b" terminal\width
            unless \minimal? ->
                prints "\n"
        ]

        \showAnalysis
    ]
]

peregrino: function [cmds][
    p: to :peregrino [cmds]!
    p\benchmark ø
]